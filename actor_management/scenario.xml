<html>
<body>
<div id='index'></div>
<div id='main'><h2>Summary</h2>
<p>This scenarios covers how the actors are managed in the system, their <ref name="role" />s and
their relationships to other entities.</p>
<h2>Models</h2>
<p><em>Intentionally left empty.</em></p>
<h2>Definitions</h2>
<def name="actor">
<p>Actors are entities corresponding to people and organizations (legal, non-legal, imagined <em>etc.</em>).</p>
<p>The granularity of an actor is variable:</p>
<ul>
<li>a single person,</li>
<li>a team of persons,</li>
<li>an informal organization (such as a GitHub organization),</li>
<li>a legal (formal) organization <em>etc.</em></li>
</ul>
<p>Some common actors include:</p>
<ul>
<li>Workers,</li>
<li>Engineers,</li>
<li>Installers,</li>
<li>Manufacturers <em>etc.</em></li>
</ul>
<p>The actors are represented using corresponding IFC entities such as:</p>
<ul>
<li><code>IfcActor</code>,</li>
<li><code>IfcPerson</code>,</li>
<li><code>IfcOrganization</code> <em>etc.</em></li>
</ul>
<p>The contact information about the actor is modeled as <code>IfcTelecomAddress</code> in <code>Addresses</code> property.</p>
</def>
<def name="relationship">
<p>An actor can be linked to many other entities in <modelref name="evolving_plan#bim3d" /> and
<modelref name="evolving_plan#bim_extended" />.</p>
<p>The relationships are modeled by using corresponding IFC entities such as:</p>
<ul>
<li><code>IfcRelAssignsToActor</code>,</li>
<li><code>IfcRelAssignsToProduct</code>,</li>
<li><code>IfcOrganizationRelationship</code></li>
<li>... and many others.</li>
</ul>
</def>
<def name="role">
<p>The role of an <ref name="actor" /> in an arbitrary context, not necessarily information security
context.</p>
</def>
<h2>Scenario</h2>
<h3>As-planned</h3>
<p>The <ref name="actor" />s and their <ref name="relationship" />s
(as well as relationships between the <ref name="actor" />s to other entities) are captured in
<modelref name="evolving_plan#bim_extended" />.</p>
<p>The system provides an application that allows the user to manage the <ref name="actor" />s and
their <ref name="relationship" />s.</p>
<p>This application should allow creating and viewing <em>arbitrary</em> relationships and actor
<name ref="role" />s.</p>
<p>In contrast, more specific applications, such as those implemented for
<scenarioref name="risk_management" /> and <scenarioref name="truck_guidance" />, should allow
creating and viewing of the relationships in the manner more appropriate for the context of the
application.</p>
<p>Additionally, this application is <em>not</em> a replacement for a much more low-level tool like
<ref name="evolving_plan#explorer" />.</p>
<p>(Note for implementation. For example, we can use Express or XSD to generate the code and the
relevant part of user interface automatically. See
<a href="https://technical.buildingsmart.org/standards/ifc/ifc-schema-specifications/">this buildingsmart table</a>
.)</p>
<p>(Note about the relationships: We need to decide how we structure them. We might allow free-form
relationships, but they should not conflict with our internal relationships such as
<ref name="risk_tracking#assignment" />. This is something that needs to evolve during the
implementation and iterations of the system.)</p>
<p>(Note about the <ref name="role" />s: there are special pre-defined <ref name="role" />s, such as
<ref name="risk_tracking#preventive_resource" />, that have consequences in terms of information
security.</p>
<p>How we handle this pre-defined set of these <ref name="role" />s with special semantic is left out as an
<em>important</em> implementation detail. We could not decide right now, 2021-01-15, how it should be
handled.</p>
<p>For example, there might be a separate application, &quot;role management&quot;, where you can add new
<ref name="role" />s, but a certain set of pre-defined <ref name="role" />s can not be
changed/removed.
Additionally, the user should be warned if she creates a <ref name="role" /> with a similar name
to the existing one (<em>e.g.</em>, with or without underscore).</p>
<p>The system might provide a set of common, frequently-used <ref name="role" />s at instantiation
time of the system. These common <ref name="role" />s, however, <em>can</em> be modified/removed.</p>
<p>Check also <a href="https://digitalconstruction.github.io/Agents/#overv">DICO agents</a> for an example of
pre-defined <ref name="role" />s and relationships, capabilities <em>etc.</em>
Perhaps we can map the interesting bits to IFC classes and use them to initialize the system.</p>
<p>Additionally, we can introduce these entities in <modelref name="evolving_plan#bim_extended" /> as
IFC &quot;shadows&quot; where we lock them and do not allow a user to modify them, similar how we plan to
deal with <ref name="role" />s conveying special semantic.)</p>
<p><strong>Actor list import</strong>.
The system should provide an import of the complete list of <ref name="actor" />s from external
sources. (For example, an excel table or from Visilean.)  </p>
<p>This import is not a complete overwrite, but an extension to the existing <ref name="actor" />s.</p>
<p>The mapping of <ref name="actor" /> identifiers to the existing identifiers is the responsibility
of the individual import tool.</p>
<p><em>The remaining aspect sections intentionally left empty.</em></p>
<h2>Test Cases</h2>
<test name="blank_state">
<p>We test that the actor management works on empty data.</p>
<p>We install the system and do not populate anything.</p>
</test>
<test name="recorded_state">
<p>We record the data of a toy project.</p>
<p>We freeze the data.</p>
<p>We pre-define a set of actions (such as insert a new <ref name="actor" />,
create a new <ref name="role" />, assign an <ref name="actor" /> to a <ref name="role" /> or
to an organization <em>etc.</em>).</p>
<p>We record the effects, so that we can repeatedly test the behavior of the system in automatic way. </p>
</test>
<test name="big_data">
<p>We generate automatically the data of a toy project to test that the system can handle the
<acceptanceref name="magintude" />.</p>
<p>We only check if nothing crashes and perform a set of pre-defined actions.</p>
<p>(Implementation note: use a tool for property-based testing to generate data such as
<a href="QuickCheck">https://en.wikipedia.org/wiki/QuickCheck</a>) </p>
</test>
<h2>Acceptance Criteria</h2>
<acceptance name="magintude">
<p>We expect the system to handle the number of <ref name="actor" />s in the order of thousands
(not millions).</p>
<p>We also expect the number of relationships to be in the order of tens of thousands
(not in millions).</p>
</acceptance>
</div>
</body>
</html>